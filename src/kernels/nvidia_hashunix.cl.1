#define ROTATE(a,b) ((a) << (b)) + ((a) >> (32-(b)))
#define bitselect(a,b,c) (((a)&(b))|((~a)&(c)))

#define SET_AIS(ai1,ai2,ii1,ii2) { \
	ai1[(ii1.x)>>2] |= ( ( ((ai2[ii2>>2]) >> ((ii2&3)<<3)) &255) << ((ii1.x&3)<<3)); \
	}


#define SET_AB(ai1,ii1,bb) { \
	ai1[(ii1.x)>>2] |= ((bb) << ((ii1.x&3)<<3)); \
	}

#define gli get_local_id(0)


#define MD5STEP_ROUND1(a, b, c, d, AC, x, s)  (a)=(a)+(AC)+(x)+bitselect((b),(c),(d));(a) = ROTATE(a,s)+(b);
#define MD5STEP_ROUND1_NULL(a, b, c, d, AC, s)  (a)=(a)+(AC)+bitselect((b),(c),(d));(a) = ROTATE(a,s)+(b);
#define MD5STEP_ROUND1A(a, b, c, d, AC, x, s)  tmp1 = (c)^(d);tmp1 = tmp1 & (b);tmp1 = tmp1 ^ (d);(a) = (a)+(tmp1); (a) = (a) + (AC);(a) = (a)+(x);(a) = ROTATE(a,s)+(b);

#define MD5STEP_ROUND2(a, b, c, d, AC, x, s)  (a)=(a)+(AC)+(x)+bitselect((d),(b),(c));(a) = ROTATE(a,s)+(b);
#define MD5STEP_ROUND2_NULL(a, b, c, d, AC, s)  (a)=(a)+(AC)+bitselect((d),(b),(c)); (a) = ROTATE(a,s)+(b);

#define MD5STEP_ROUND3_EVEN(a, b, c, d, AC, x, s) tmp2 = (b) ^ (c);tmp1 = tmp2 ^ (d);(a) = (a)+tmp1; (a) = (a)+(AC);(a) = (a)+(x); (a) = ROTATE(a,s); (a) = (a)+(b);
#define MD5STEP_ROUND3_NULL_EVEN(a, b, c, d, AC, s)  tmp2 = (b) ^ (c);tmp1 = tmp2 ^ (d);(a) = (a)+tmp1; (a) = (a)+(AC); (a) = ROTATE(a,s); (a) = (a)+(b);
#define MD5STEP_ROUND3_ODD(a, b, c, d, AC, x, s) tmp1 = tmp2 ^ (b);(a) = (a)+tmp1; (a) = (a)+(AC);(a) = (a)+(x); (a) = ROTATE(a,s); (a) = (a)+(b);  
#define MD5STEP_ROUND3_NULL_ODD(a, b, c, d, AC, s)  tmp1 = tmp2 ^ (b);(a) = (a)+tmp1; (a) = (a)+(AC); (a) = ROTATE(a,s); (a) = (a)+(b); 

#define MD5STEP_ROUND4(a, b, c, d, AC, x, s)  tmp1 = (~(d)); tmp1 = b | tmp1; tmp1 = tmp1 ^ c; (a) = (a)+tmp1; (a) = (a)+(AC); (a) = (a)+(x); (a) = ROTATE(a,s); (a) = (a)+(b);  
#define MD5STEP_ROUND4_NULL(a, b, c, d, AC, s)  tmp1 = (~(d)); tmp1 = b | tmp1; tmp1 = tmp1 ^ c; (a) = (a)+tmp1; (a) = (a)+(AC); (a) = ROTATE(a,s); (a) = (a)+(b);



#ifdef LEN15
__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix15( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,e,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];



tsize=(uint2)15;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][2].x=input[(get_global_id(0)*8)+2];
str[gli][3].x=input[(get_global_id(0)*8)+3];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];
str[gli][2].y=input[(get_global_id(0)*8)+6];
str[gli][3].y=input[(get_global_id(0)*8)+7];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,14);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;



// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,14);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,14);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,14);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);
a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 


id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}


#endif
#ifdef LEN14

__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix14( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];


tsize=(uint2)14;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][2].x=input[(get_global_id(0)*8)+2];
str[gli][3].x=input[(get_global_id(0)*8)+3];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];
str[gli][2].y=input[(get_global_id(0)*8)+6];
str[gli][3].y=input[(get_global_id(0)*8)+7];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 


id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}



#endif
#ifdef LEN13


__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix13( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];



tsize=(uint2)13;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][2].x=input[(get_global_id(0)*8)+2];
str[gli][3].x=input[(get_global_id(0)*8)+3];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];
str[gli][2].y=input[(get_global_id(0)*8)+6];
str[gli][3].y=input[(get_global_id(0)*8)+7];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 



id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}



#endif
#ifdef LEN12


__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix12( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];



tsize=(uint2)12;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][2].x=input[(get_global_id(0)*8)+2];
str[gli][3].x=input[(get_global_id(0)*8)+3];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];
str[gli][2].y=input[(get_global_id(0)*8)+6];
str[gli][3].y=input[(get_global_id(0)*8)+7];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);
a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 


id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}


#endif
#ifdef LEN11


__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix11( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];


tsize=(uint2)11;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][2].x=input[(get_global_id(0)*8)+2];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];
str[gli][2].y=input[(get_global_id(0)*8)+6];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 


id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}


#endif
#ifdef LEN10


__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix10( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];


tsize=(uint2)10;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][2].x=input[(get_global_id(0)*8)+2];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];
str[gli][2].y=input[(get_global_id(0)*8)+6];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;

a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 


id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}



#endif
#ifdef LEN9



__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix9( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];



tsize=(uint2)9;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][2].x=input[(get_global_id(0)*8)+2];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];
str[gli][2].y=input[(get_global_id(0)*8)+6];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);


a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 


id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}



#endif
#ifdef LEN8


__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix8( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];


tsize=(uint2)8;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][2].x=input[(get_global_id(0)*8)+2];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];
str[gli][2].y=input[(get_global_id(0)*8)+6];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=(uint2)0;

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 



id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}


#endif
#ifdef LEN7



__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix7( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];



tsize=(uint2)7;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 


id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}



#endif
#ifdef LEN6



__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix6( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];



tsize=(uint2)6;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 


id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}


#endif
#ifdef LEN5



__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix5( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];



tsize=(uint)5;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;
MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13],S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, x[13], mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, x[12], mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35,x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_EVEN(c, d, a, b, mAC47,x[12], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62,x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);
a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 



id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}


#endif
#ifdef LEN4



__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix4( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];





tsize=4;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][1].x=input[(get_global_id(0)*8)+1];
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;
str[gli][1].y=input[(get_global_id(0)*8)+5];

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
//SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;


for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}


SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
//SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
//SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
//SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
//SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1_NULL(b, c, d, a, mAC12,S14);
MD5STEP_ROUND1_NULL(a, b, c, d, mAC13,S11);
MD5STEP_ROUND1_NULL(d, a, b, c, mAC14,S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2_NULL (c, d, a, b, mAC19,S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2_NULL (a, b, c, d, mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2_NULL (b, c, d, a, mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_NULL_EVEN (c, d, a, b, mAC35, S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_NULL_EVEN (a, b, c, d, mAC41, S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4_NULL (a, b, c, d, mAC53, S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4_NULL (b, c, d, a, mAC60, S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC62, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=(uint2)0;
x[3]=(uint2)0;
ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
//SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
//SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1_NULL(b, c, d, a, mAC12,S14);
MD5STEP_ROUND1_NULL(a, b, c, d, mAC13,S11);
MD5STEP_ROUND1_NULL(d, a, b, c, mAC14,S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2_NULL (c, d, a, b, mAC19,S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2_NULL (a, b, c, d, mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2_NULL (b, c, d, a, mAC32, S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_NULL_EVEN (c, d, a, b, mAC35, S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_NULL_EVEN (a, b, c, d, mAC41, S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4_NULL (a, b, c, d, mAC53, S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4_NULL (b, c, d, a, mAC60, S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC62, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 


id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;


found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}



#endif
#ifdef LEN3



__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix3( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];


tsize=(uint2)3;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=(uint2)0;
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=(uint2)0;
x[2]=(uint2)0;
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1_NULL(b, c, d, a, mAC12,S14);
MD5STEP_ROUND1_NULL(a, b, c, d, mAC13,S11);
MD5STEP_ROUND1_NULL(d, a, b, c, mAC14,S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2_NULL (c, d, a, b, mAC19,S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2_NULL (a, b, c, d, mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2_NULL (b, c, d, a, mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_NULL_EVEN (c, d, a, b, mAC35, S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_NULL_EVEN (a, b, c, d, mAC41, S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4_NULL (a, b, c, d, mAC53, S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4_NULL (b, c, d, a, mAC60, S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC62, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=(uint2)0;
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1_NULL(b, c, d, a, mAC12,S14);
MD5STEP_ROUND1_NULL(a, b, c, d, mAC13,S11);
MD5STEP_ROUND1_NULL(d, a, b, c, mAC14,S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2_NULL (c, d, a, b, mAC19,S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2_NULL (a, b, c, d, mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2_NULL (b, c, d, a, mAC32, S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_NULL_EVEN (c, d, a, b, mAC35, S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_NULL_EVEN (a, b, c, d, mAC41, S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4_NULL (a, b, c, d, mAC53, S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4_NULL (b, c, d, a, mAC60, S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC62, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 



id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}


#endif
#ifdef LEN2


__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix2( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];



tsize=(uint2)2;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=(uint2)0;
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=(uint2)0;
x[2]=(uint2)0;
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1_NULL(b, c, d, a, mAC12,S14);
MD5STEP_ROUND1_NULL(a, b, c, d, mAC13,S11);
MD5STEP_ROUND1_NULL(d, a, b, c, mAC14,S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2_NULL (c, d, a, b, mAC19,S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2_NULL (a, b, c, d, mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2_NULL (b, c, d, a, mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_NULL_EVEN (c, d, a, b, mAC35, S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_NULL_EVEN (a, b, c, d, mAC41, S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4_NULL (a, b, c, d, mAC53, S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4_NULL (b, c, d, a, mAC60, S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC62, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=(uint2)0;
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1_NULL(b, c, d, a, mAC12,S14);
MD5STEP_ROUND1_NULL(a, b, c, d, mAC13,S11);
MD5STEP_ROUND1_NULL(d, a, b, c, mAC14,S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2_NULL (c, d, a, b, mAC19,S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2_NULL (a, b, c, d, mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2_NULL (b, c, d, a, mAC32, S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_NULL_EVEN (c, d, a, b, mAC35, S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_NULL_EVEN (a, b, c, d, mAC41, S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4_NULL (a, b, c, d, mAC53, S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4_NULL (b, c, d, a, mAC60, S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC62, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;

} 



id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}


#endif
#ifdef LEN1



__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix1( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];



tsize=(uint2)1;
str[gli][0].x=input[(get_global_id(0)*8)]+salt.s0;
str[gli][0].y=input[(get_global_id(0)*8)+4]+salt.s4;

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=str[gli][0];
x[1]=(uint2)0;
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
//SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=str[gli][0];
x[1]=(uint2)0;
x[2]=(uint2)0;
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1_NULL(b, c, d, a, mAC12,S14);
MD5STEP_ROUND1_NULL(a, b, c, d, mAC13,S11);
MD5STEP_ROUND1_NULL(d, a, b, c, mAC14,S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2_NULL (c, d, a, b, mAC19,S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2_NULL (a, b, c, d, mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2_NULL (b, c, d, a, mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_NULL_EVEN (c, d, a, b, mAC35, S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_NULL_EVEN (a, b, c, d, mAC41, S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4_NULL (a, b, c, d, mAC53, S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4_NULL (b, c, d, a, mAC60, S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC62, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1_NULL(b, c, d, a, mAC12,S14);
MD5STEP_ROUND1_NULL(a, b, c, d, mAC13,S11);
MD5STEP_ROUND1_NULL(d, a, b, c, mAC14,S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2_NULL (c, d, a, b, mAC19,S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2_NULL (a, b, c, d, mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2_NULL (b, c, d, a, mAC32, S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_NULL_EVEN (c, d, a, b, mAC35, S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_NULL_EVEN (a, b, c, d, mAC41, S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4_NULL (a, b, c, d, mAC53, S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4_NULL (b, c, d, a, mAC60, S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC62, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;
} 

id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}


#endif
#ifdef LEN0


__kernel void __attribute__((reqd_work_group_size(64, 1, 1))) 
hashunix0( __global uint4 *dst,  __global uint *input,   __global uint *found_ind, uint16 salt, __global uint *found,  uint4 singlehash) 
{

uint2 mCa= (uint2)0x67452301;
uint2 mCb= (uint2)0xefcdab89;
uint2 mCc= (uint2)0x98badcfe;
uint2 mCd= (uint2)0x10325476;
uint2 S11= (uint2)7; 
uint2 S12= (uint2)12;
uint2 S13= (uint2)17;
uint2 S14= (uint2)22;
uint2 S21= (uint2)5; 
uint2 S22= (uint2)9; 
uint2 S23= (uint2)14;
uint2 S24= (uint2)20;
uint2 S31= (uint2)4; 
uint2 S32= (uint2)11;
uint2 S33= (uint2)16;
uint2 S34= (uint2)23;
uint2 S41= (uint2)6; 
uint2 S42= (uint2)10;
uint2 S43= (uint2)15;
uint2 S44= (uint2)21;

uint2 mAC1 = (uint2)0xd76aa478; 
uint2 mAC2 = (uint2)0xe8c7b756; 
uint2 mAC3 = (uint2)0x242070db; 
uint2 mAC4 = (uint2)0xc1bdceee; 
uint2 mAC5 = (uint2)0xf57c0faf; 
uint2 mAC6 = (uint2)0x4787c62a; 
uint2 mAC7 = (uint2)0xa8304613; 
uint2 mAC8 = (uint2)0xfd469501; 
uint2 mAC9 = (uint2)0x698098d8; 
uint2 mAC10= (uint2)0x8b44f7af; 
uint2 mAC11= (uint2)0xffff5bb1; 
uint2 mAC12= (uint2)0x895cd7be; 
uint2 mAC13= (uint2)0x6b901122; 
uint2 mAC14= (uint2)0xfd987193; 
uint2 mAC15= (uint2)0xa679438e; 
uint2 mAC16= (uint2)0x49b40821; 
uint2 mAC17= (uint2)0xf61e2562; 
uint2 mAC18= (uint2)0xc040b340; 
uint2 mAC19= (uint2)0x265e5a51; 
uint2 mAC20= (uint2)0xe9b6c7aa; 
uint2 mAC21= (uint2)0xd62f105d; 
uint2 mAC22= (uint2)0x02441453; 
uint2 mAC23= (uint2)0xd8a1e681; 
uint2 mAC24= (uint2)0xe7d3fbc8; 
uint2 mAC25= (uint2)0x21e1cde6; 
uint2 mAC26= (uint2)0xc33707d6; 
uint2 mAC27= (uint2)0xf4d50d87; 
uint2 mAC28= (uint2)0x455a14ed; 
uint2 mAC29= (uint2)0xa9e3e905; 
uint2 mAC30= (uint2)0xfcefa3f8; 
uint2 mAC31= (uint2)0x676f02d9; 
uint2 mAC32= (uint2)0x8d2a4c8a; 
uint2 mAC33= (uint2)0xfffa3942; 
uint2 mAC34= (uint2)0x8771f681; 
uint2 mAC35= (uint2)0x6d9d6122; 
uint2 mAC36= (uint2)0xfde5380c; 
uint2 mAC37= (uint2)0xa4beea44; 
uint2 mAC38= (uint2)0x4bdecfa9; 
uint2 mAC39= (uint2)0xf6bb4b60; 
uint2 mAC40= (uint2)0xbebfbc70; 
uint2 mAC41= (uint2)0x289b7ec6; 
uint2 mAC42= (uint2)0xeaa127fa; 
uint2 mAC43= (uint2)0xd4ef3085; 
uint2 mAC44= (uint2)0x04881d05; 
uint2 mAC45= (uint2)0xd9d4d039; 
uint2 mAC46= (uint2)0xe6db99e5; 
uint2 mAC47= (uint2)0x1fa27cf8; 
uint2 mAC48= (uint2)0xc4ac5665; 
uint2 mAC49= (uint2)0xf4292244; 
uint2 mAC50= (uint2)0x432aff97; 
uint2 mAC51= (uint2)0xab9423a7; 
uint2 mAC52= (uint2)0xfc93a039; 
uint2 mAC53= (uint2)0x655b59c3; 
uint2 mAC54= (uint2)0x8f0ccc92; 
uint2 mAC55= (uint2)0xffeff47d; 
uint2 mAC56= (uint2)0x85845dd1; 
uint2 mAC57= (uint2)0x6fa87e4f; 
uint2 mAC58= (uint2)0xfe2ce6e0; 
uint2 mAC59= (uint2)0xa3014314; 
uint2 mAC60= (uint2)0x4e0811a1; 
uint2 mAC61= (uint2)0xf7537e82; 
uint2 mAC62= (uint2)0xbd3af235; 
uint2 mAC63= (uint2)0x2ad7d2bb; 
uint2 mAC64= (uint2)0xeb86d391; 


uint2 SIZE,tsize;  
uint i,j,ib,ic,id,ie,i1,i2,i3,i4;
uint2 t1,t2,t3,t4;
uint2 a,b,c,d,tmp1,tmp2,ii,jj; 

uint b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16;

uint2 x[14]; 
uint2 alt[4]; 
__local uint2 str[64][4];
uint2 ssalt[2];


tsize=(uint2)salt.sD+salt.s0+salt.s4+salt.s8+salt.sB;

ssalt[0]=(uint2)salt.sE;
ssalt[1]=(uint2)salt.sF;



// Calculate alternate sum (pass+salt+pass)
x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

x[0]=(uint2)0;
x[1]=(uint2)0;
x[2]=(uint2)0;
x[3]=(uint2)0;

ii=tsize;

SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

ii=(uint2)8+2*tsize;

SET_AB(x,ii,0x80);
SIZE=(uint2)((8+2*tsize)<<3);


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

alt[0]=a+mCa;alt[1]=b+mCb;alt[2]=c+mCc;alt[3]=d+mCd;



x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;
ii=(uint2)0;
x[0]=(uint2)0;
x[1]=(uint2)0;
x[2]=(uint2)0;
x[3]=(uint2)0;
ii=tsize;

SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AB(x,ii,'1');ii+=(uint2)1;
SET_AB(x,ii,'$');ii+=(uint2)1;
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;

for (i=0;i<tsize.x;i++) 
{
SET_AIS(x,alt,ii,i);ii+=(uint2)1;
}

for (i = tsize.x; i > 0; i >>= 1)
{
    jj = (i&1) != 0 ?  0x00 : str[gli][0]&255;
    x[(ii.x)>>2] |= (jj << (((ii.x)&3)<<3));
    ii+=(uint2)1;
}

SET_AB(x,ii,0x80);
SIZE=(uint2)(ii)<<3;



a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1(b, c, d, a, mAC12,x[11],S14);
MD5STEP_ROUND1(a, b, c, d, mAC13,x[12],S11);
MD5STEP_ROUND1(d, a, b, c, mAC14,x[13], S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC19, x[11],S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC29, x[13],S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC32, x[12], S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC35, x[11], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC41,x[13], S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_ODD(d, a, b, c, mAC46, x[12], S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC53, x[12], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC60, x[13], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC62, x[11], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;



// We've got int0, let's do some 1000 md5 iterations
for (ic=0;ic<1000;ic+=2)
{

x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=a;
x[1]=b;
x[2]=c;
x[3]=d;
ii=(uint2)16;

if (ic % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}


if (ic % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,14);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,15);ii+=(uint2)1;
ii=jj+tsize;
}

jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,14);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,15);ii+=(uint2)1;
ii=jj+tsize;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1_NULL(b, c, d, a, mAC12,S14);
MD5STEP_ROUND1_NULL(a, b, c, d, mAC13,S11);
MD5STEP_ROUND1_NULL(d, a, b, c, mAC14,S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2_NULL (c, d, a, b, mAC19,S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2_NULL (a, b, c, d, mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2_NULL (b, c, d, a, mAC32,S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_NULL_EVEN (c, d, a, b, mAC35, S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_NULL_EVEN (a, b, c, d, mAC41, S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4_NULL (a, b, c, d, mAC53, S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4_NULL (b, c, d, a, mAC60, S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC62, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;


x[0]=x[1]=x[2]=x[3]=x[4]=x[5]=x[6]=x[7]=x[8]=x[9]=x[10]=x[11]=x[12]=x[13]=(uint2)0;

alt[0]=a;
alt[1]=b;
alt[2]=c;
alt[3]=d;
ii=(uint2)0;

x[0]=str[gli][0];
x[1]=str[gli][1];
x[2]=str[gli][2];
x[3]=str[gli][3];

ii=tsize;

if ((ic+1) % 3 != 0)
{
SET_AIS(x,ssalt,ii,0);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,1);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,2);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,3);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,4);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,5);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,6);ii+=(uint2)1;
SET_AIS(x,ssalt,ii,7);ii+=(uint2)1;
}

if ((ic+1) % 7 != 0)
{
jj=ii;
SET_AIS(x,str[gli],ii,0);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,1);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,2);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,3);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,4);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,5);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,6);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,7);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,8);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,9);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,10);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,11);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,12);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,13);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,14);ii+=(uint2)1;
SET_AIS(x,str[gli],ii,15);ii+=(uint2)1;
ii=jj+tsize;
}

SET_AIS(x,alt,ii,0);ii+=(uint2)1;
SET_AIS(x,alt,ii,1);ii+=(uint2)1;
SET_AIS(x,alt,ii,2);ii+=(uint2)1;
SET_AIS(x,alt,ii,3);ii+=(uint2)1;
SET_AIS(x,alt,ii,4);ii+=(uint2)1;
SET_AIS(x,alt,ii,5);ii+=(uint2)1;
SET_AIS(x,alt,ii,6);ii+=(uint2)1;
SET_AIS(x,alt,ii,7);ii+=(uint2)1;
SET_AIS(x,alt,ii,8);ii+=(uint2)1;
SET_AIS(x,alt,ii,9);ii+=(uint2)1;
SET_AIS(x,alt,ii,10);ii+=(uint2)1;
SET_AIS(x,alt,ii,11);ii+=(uint2)1;
SET_AIS(x,alt,ii,12);ii+=(uint2)1;
SET_AIS(x,alt,ii,13);ii+=(uint2)1;
SET_AIS(x,alt,ii,14);ii+=(uint2)1;
SET_AIS(x,alt,ii,15);ii+=(uint2)1;

SET_AB(x,ii,0x80);

SIZE=(uint2)(ii)<<3;


a = mCa; b = mCb; c = mCc; d = mCd;

MD5STEP_ROUND1(a, b, c, d, mAC1, x[0], S11);  
MD5STEP_ROUND1(d, a, b, c, mAC2, x[1], S12);  
MD5STEP_ROUND1(c, d, a, b, mAC3, x[2], S13);  
MD5STEP_ROUND1(b, c, d, a, mAC4, x[3], S14);  
MD5STEP_ROUND1(a, b, c, d, mAC5, x[4], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC6, x[5], S12); 
MD5STEP_ROUND1(c, d, a, b, mAC7, x[6], S13); 
MD5STEP_ROUND1(b, c, d, a, mAC8, x[7], S14); 
MD5STEP_ROUND1(a, b, c, d, mAC9, x[8], S11); 
MD5STEP_ROUND1(d, a, b, c, mAC10,x[9], S12);
MD5STEP_ROUND1(c, d, a, b, mAC11,x[10],S13);
MD5STEP_ROUND1_NULL(b, c, d, a, mAC12,S14);
MD5STEP_ROUND1_NULL(a, b, c, d, mAC13,S11);
MD5STEP_ROUND1_NULL(d, a, b, c, mAC14,S12);
MD5STEP_ROUND1(c, d, a, b, mAC15,SIZE, S13);  
MD5STEP_ROUND1_NULL(b, c, d, a, mAC16, S14);

MD5STEP_ROUND2 (a, b, c, d, mAC17, x[1], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC18, x[6], S22);
MD5STEP_ROUND2_NULL (c, d, a, b, mAC19,S23);
MD5STEP_ROUND2 (b, c, d, a, mAC20, x[0], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC21, x[5], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC22, x[10],S22);
MD5STEP_ROUND2_NULL (c, d,  a, b, mAC23, S23);
MD5STEP_ROUND2 (b, c, d, a, mAC24, x[4], S24);
MD5STEP_ROUND2 (a, b, c, d, mAC25, x[9], S21);
MD5STEP_ROUND2 (d, a, b, c, mAC26, SIZE, S22);  
MD5STEP_ROUND2 (c, d, a, b, mAC27, x[3], S23);
MD5STEP_ROUND2 (b, c, d, a, mAC28, x[8], S24);
MD5STEP_ROUND2_NULL (a, b, c, d, mAC29,S21);
MD5STEP_ROUND2 (d, a, b, c, mAC30, x[2], S22);
MD5STEP_ROUND2 (c, d, a, b, mAC31, x[7], S23);
MD5STEP_ROUND2_NULL (b, c, d, a, mAC32, S24);

MD5STEP_ROUND3_EVEN(a, b, c, d, mAC33, x[5],  S31);
MD5STEP_ROUND3_ODD(d, a, b, c, mAC34, x[8], S32);
MD5STEP_ROUND3_NULL_EVEN (c, d, a, b, mAC35, S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC36, SIZE, S34);  
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC37, x[1], S31);
MD5STEP_ROUND3_ODD (d, a, b, c, mAC38, x[4], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC39,x[7], S33);  
MD5STEP_ROUND3_ODD (b, c, d, a, mAC40, x[10], S34);
MD5STEP_ROUND3_NULL_EVEN (a, b, c, d, mAC41, S31);  
MD5STEP_ROUND3_ODD (d, a, b, c, mAC42, x[0], S32);
MD5STEP_ROUND3_EVEN (c, d, a, b, mAC43, x[3], S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC44, x[6], S34);
MD5STEP_ROUND3_EVEN (a, b, c, d, mAC45, x[9], S31);  
MD5STEP_ROUND3_NULL_ODD(d, a, b, c, mAC46, S32);
MD5STEP_ROUND3_NULL_EVEN(c, d, a, b, mAC47, S33);
MD5STEP_ROUND3_ODD (b, c, d, a, mAC48, x[2], S34);

MD5STEP_ROUND4 (a, b, c, d, mAC49, x[0], S41);
MD5STEP_ROUND4 (d, a, b, c, mAC50, x[7], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC51, SIZE, S43);  
MD5STEP_ROUND4 (b, c, d, a, mAC52, x[5], S44);
MD5STEP_ROUND4_NULL (a, b, c, d, mAC53, S41);
MD5STEP_ROUND4 (d, a, b, c, mAC54, x[3], S42);
MD5STEP_ROUND4 (c, d, a, b, mAC55, x[10], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC56, x[1], S44);
MD5STEP_ROUND4 (a, b, c, d, mAC57, x[8], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC58, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC59, x[6], S43);
MD5STEP_ROUND4_NULL (b, c, d, a, mAC60, S44);
MD5STEP_ROUND4 (a, b, c, d, mAC61, x[4], S41);
MD5STEP_ROUND4_NULL (d, a, b, c, mAC62, S42);
MD5STEP_ROUND4 (c, d, a, b, mAC63, x[2], S43);
MD5STEP_ROUND4 (b, c, d, a, mAC64, x[9], S44);

a=a+mCa;b=b+mCb;c=c+mCc;d=d+mCd;
} 

id=0;
if (all((uint2)singlehash.x!=a)) return;
if (all((uint2)singlehash.y!=b)) return;



found[0] = 1;
found_ind[get_global_id(0)] = 1;


dst[(get_global_id(0)<<1)] = (uint4)(a.x,b.x,c.x,d.x);
dst[(get_global_id(0)<<1)+1] = (uint4)(a.y,b.y,c.y,d.y);
}

#endif


#!/usr/bin/perl

#============================================================#
#                                                            #
# This file is part of hashkill and shares the same license. #
# Copyright (C) 2013 Milen Rangelov <gat3way@gat3way.eu>     #
#                                                            #
#============================================================#


use strict;
use Data::Dumper;
use File::Basename;
use Digest::SHA;
use MIME::Base64;
use DBI;


my @mozilla_linux_dirs;
my @mozilla_linux_dirs_lp;
my @chrome_dbs;
my @opera_dbs;
my @gathered_data;




# Display usage information and quit
sub usage()
{
    print "Usage: ./lastpass2hashkill.pl <directory_to_scan>\n";
    exit(1);
}


sub scan_mozilla_linux($)
{
    my $dir = shift;
    open(PS,"find $dir -type f -name prefs.js |") || die "Failed to exec: $!\n";
    while ( <PS> )
    {
	my $entry = $_;
	chomp($entry);
	if ( -e dirname($entry)."/../../../.lastpass")
	{
	    my $h_entry = { mozilla_dir => dirname($entry), lastpass_dir => dirname($entry)."/../../../.lastpass", };
	    push(@mozilla_linux_dirs, $h_entry);
	}
    }
    close(PS);
}


sub scan_chrome($)
{
    my $dir = shift;
    open(PS,"find $dir -type f |grep /Default/databases/chrome-extension_hdokiejnpimakedhajhdlcegeplioahd_0 |") || die "Failed to exec: $!\n";
    while ( <PS> )
    {
	my $entry = $_;
	chomp($entry);
	my $dbh = DBI->connect( "dbi:SQLite:$entry" ) || die ("DBI problem!\n");
	local $SIG{'__WARN__'} = sub { my $err = "eat the error $_[0]"; };
	next unless $dbh->prepare("SELECT 1 FROM LastPassData");
	my $h_entry = { chrome_db => $entry };
	push(@chrome_dbs, $h_entry);
    }
    close(PS);
}


sub scan_opera($)
{
    my $dir = shift;
    open(PS,"find $dir -type f |grep widgets/wuid- |grep pstorage/ |") || die "Failed to exec: $!\n";
    while ( <PS> )
    {
	my $entry = $_;
	chomp($entry);
	my $dbh = DBI->connect( "dbi:SQLite:$entry" ) || die ("DBI problem!\n");
	local $SIG{'__WARN__'} = sub { my $err = "eat the error $_[0]"; };
	next unless $dbh->prepare("SELECT 1 FROM LastPassData");
	my $h_entry = { chrome_db => $entry };
	push(@chrome_dbs, $h_entry);
    }
    close(PS);
}




# Process mozilla (linux) entry
sub process_mozilla_linux($)
{
    my $entry = shift;
    my $lastpass_dir = $entry->{lastpass_dir};
    my $mozilla_dir = $entry->{mozilla_dir};

    # Get email from prefs.js
    open(MFILE, "$mozilla_dir/prefs.js") || die "Failed to open: $!\n";
    while ( <MFILE> )
    {
	my $line = $_;
	chomp($line);

	# good, we have a mail!
	if (index($line,"extensions.lastpass.loginusers")>0)
	{
	    my @splitted = split("\"",$line);
	    $splitted[3] =~ s/\%40/\@/g;
	    # hash it!
	    my $sha256 = new Digest::SHA 256;
	    $sha256->add($splitted[3]);
	    my $hash = $sha256->hexdigest();
	    # Got a lastpass entry!
	    if (-e $lastpass_dir."/".$hash."_lpall.slps")
	    {
		open(MFILE1,$lastpass_dir."/".$hash."_lpall.slps");
		my @lines = <MFILE1>;
		close(MFILE1);
		my $verifier = unpack("H32",decode_base64($lines[1]));
		open(MFILE2,$lastpass_dir."/".$hash."_key.itr");
		@lines = <MFILE2>;
		close(MFILE2);
		my $iterations = $lines[0];
		my $node = { username => $splitted[3], verifier => $verifier, iterations => $iterations, mode => 1,};
		push(@gathered_data,$node);
	    }
	}
    }
    close(MFILE);
}



# Process chrome entry
sub process_chrome($)
{
    my $entry = shift;
    my $chrome_db = $entry->{chrome_db};
    my $dbh;
    my $dbh1;
    my $res;
    my $res1;
    my @data;
    my $iterations;
    my $verifier;

    $dbh = DBI->connect( "dbi:SQLite:$chrome_db" ) || return;
    $res = $dbh->selectall_hashref("SELECT * FROM LastPassSavedLogins2","username");
    foreach my $data (keys %$res)
    {
	my $sha256 = new Digest::SHA 256;
        $sha256->add($data);
        my $digest = $sha256->hexdigest();

	$dbh1 = DBI->connect( "dbi:SQLite:$chrome_db" ) || next;
	$res1 = $dbh1->selectall_hashref("SELECT * FROM LastPassData where username_hash='$digest' and type='accts'","data");
        foreach my $data (keys %$res1)
        {
            my @split1 = split(/;/,$data);
            my @split2 = split(/=/,$split1[0]);
	    $iterations = $split2[1];
        }

	$dbh1 = DBI->connect( "dbi:SQLite:$chrome_db" ) || next;
	$res1 = $dbh1->selectall_hashref("SELECT * FROM LastPassData where username_hash='$digest' and type='key'","data");
        foreach my $data (keys %$res1)
        {
            my @split = split(/\n/,$data);
	    my $base64 = $split[1];
	    $verifier = unpack("H32",decode_base64($base64));
        }
	my $node = { username => $data, verifier => $verifier, iterations => $iterations, mode => 1,};
	push(@gathered_data,$node);
    }
}





# We have the correct syntax?
my $argc = @ARGV;
if ($argc != 1)
{
    usage();
}
my $dir = $ARGV[0];


print "Scanning for Firefox (Linux) LastPass databases...\n";
scan_mozilla_linux($dir);

print "Scanning for Chrome (Linux/Windows/OSX) LastPass databases...\n";
scan_chrome($dir);

# This one will reuse chrome's sqlite mechanism so no separate analyze function required
print "Scanning for Opera (Linux/Windows/OSX) LastPass databases...\n";
scan_opera($dir);



# Analizing gathered data
print "Analyzing data...\n";
foreach my $elem (@mozilla_linux_dirs)
{
    process_mozilla_linux($elem);
}
foreach my $elem (@chrome_dbs)
{
    process_chrome($elem);
}



print "\n\n";

#Dump results
print "Found LastPass installations:\n=============================\n\n";
foreach my $elem (@gathered_data)
{
    print "lastpass:$elem->{username}:$elem->{mode}:$elem->{iterations}|$elem->{verifier}\n";
}
print "\n";